#!/usr/bin/env bash

help() {
  echo "usage: $0 localWorkdir directoryInHdfs IMPERSONATED_USERNAME [destDirectoryInHdfs]"
  exit 1
}

if [ $# -ne 3 && $# -ne 4 ] ; then
  help
fi

workdir=$1
hdfsFile="$2"
IMPERSONATED_USERNAME=$3
dir="$4"

#FSM states: STAGING, ZIPPING, UPLOADING, CHOWNING, SUCCESS, FAILED
fsmFile="${workdir}/fsm.txt"

# Sleep is needed, otherwise the user will not see final status (SUCCESS, FAILED) in UI
function finish {
    sleep 30s
    rm -rf "$workdir"
}
trap finish EXIT

function check_error {
    if [ $? -ne 0 ] ; then
      echo "FAILED" > "$fsmFile"
      exit 1	
    fi
}

uriencode() {
  python -c "import sys, urllib as ul; print ul.quote(sys.argv[1])" "$1"
}

prefix='hdfs://'
normalizedPath=${hdfsFile#${prefix}}
check_error

file=$(basename "$normalizedPath")
check_error

if [ -z "$dir" ] ; then
  dir=$(dirname "$normalizedPath")
fi
check_error

cd "$workdir"
check_error

filename=$(basename "$hdfsFile")

echo "STAGING" > "$fsmFile"
<%= node['hops']['base_dir'] %>/bin/hdfs dfs -copyToLocal "$hdfsFile" "$workdir"
check_error

echo "ZIPPING" > "$fsmFile"

# State Machine State Change. File now staged to local FS.
# Java program checks if this file is written to see if this file exists:  $workdir/$(basename $hdfsfile)

# For now only use zip, the 'most universal' format.

cd "$workdir"
zip -r "$file".zip "$file"
check_error

# uri encode filename
escapedFileName=$(uriencode "${file}")

echo "UPLOADING" > "$fsmFile"
<%= node['hops']['base_dir'] %>/bin/hdfs dfs -copyFromLocal "${escapedFileName}.zip" "${dir}"
check_error

echo "CHOWNING" > "$fsmFile"
<%= node['hops']['base_dir'] %>/bin/hdfs dfs -chown "${IMPERSONATED_USERNAME}" "${dir}/${file}.zip"
check_error

echo "SUCCESS" > "$fsmFile"
