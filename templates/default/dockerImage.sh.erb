#!/usr/bin/env bash

set -e

help() {
    echo ""
    echo "usage: $0 [create docker_file tag] | [list image]"
    echo ""
    exit 1
}

VALID_IMAGE_NAME='<%= node['conda']['docker']['image-validation-regex'] %>'
if [ "$1" == "create" ] ; then

    # Sanity checks for injection attacks
    if [ ! -f "$2" ] ; then
	echo "Invalid docker file: $2" >&2
	help
    fi
    if ! [[ $3 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $3" >&2
	help
    fi

    DOCKER_BUILDKIT=1 docker build --network=host -f $2 --tag $3 ./

    docker push $3

<% if node['install']['managed_docker_registry'] == "false" -%>
elif [ "$1" == "delete" ] ; then
    # Remove tags from docker registry
    docker exec registry rm -rf /var/lib/registry/docker/registry/v2/repositories/$2/_manifests/tags/$3

elif [ "$1" == "gc" ] ; then
    # Run garbage collection for registry
    docker exec registry bin/registry garbage-collect /etc/docker/registry/config.yml -m

<% end -%>

elif [ "$1" == "list" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    docker pull $2 > /dev/null 2>&1
    docker run --rm $2 conda list -n theenv

elif [ "$1" == "check" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    docker pull $2 > /dev/null 2>&1
    docker run --rm $2 pip check

elif [ "$1" == "export" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    docker pull $2 > /dev/null 2>&1
    docker run --rm $2 conda env export -n theenv

else
    help
fi

exit $?
